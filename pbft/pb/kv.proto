syntax = "proto3";

package pb;

// Represents a single key, used for gets.
message Key {
    string key = 1;
}

// Represents a single value, can be used for put etc.
message Value {
    string value = 1;
}

// Represent a key-value pair that is used to return results.
message KeyValue {
    string key = 1;
    string value = 2;
}

// Represent a void message indicating success
message Success {
}

// Represents an error.
message Error {
    string msg = 1;
}

// Represents an argument for CAS
message CASArg {
    KeyValue kv = 1;
    Value value = 2;
}

// Represents an empty message
message Empty {}

// Represents a case where we need the client to connect
// to another server.
message Redirect {
    string server = 1;
}

// Represents an operation result.
message Result {
    oneof result {
        Redirect redirect = 1;
        KeyValue kv = 2;
        Success s = 3;
    }
}

// KvStore service
service KvStore {
    // Get the value associated with a key.
    rpc Get (Key) returns (Result) {}
    rpc Set (KeyValue) returns (Result) {}
    rpc Clear(Empty) returns (Result) {}
    rpc CAS(CASArg) returns (Result) {}
}

// KvStore service
service KvStorePBFT {
    // Get the value associated with a key.
    rpc Get (Key) returns (stream Result) {}
    rpc Set (KeyValue) returns (stream Result) {}
    rpc Clear(Empty) returns (stream Result) {}
    rpc CAS(CASArg) returns (stream Result) {}
}

// Internal representations for operations.
enum Op {
    GET = 0;
    SET = 1;
    CLEAR = 2;
    CAS = 3;
}

// A type for arguments across all operations
message Command {
    Op operation = 1;
    oneof arg {
        Key get = 2;
        KeyValue set = 3;
        Empty clear = 4;
        CASArg cas = 5;
    }
}

// A log entry
message Entry {
    int64 term = 1;
    int64 index = 2;
    Command cmd = 3;
}

// Input to AppendEntries (as defined in Figure 2)
message AppendEntriesArgs {
    int64 term = 1;
    string leaderID = 2;
    int64 prevLogIndex = 3;
    int64 prevLogTerm = 4;
    int64 leaderCommit = 5;
    repeated Entry entries = 6;
}

// Output from AppendEntries
message AppendEntriesRet {
    int64 term = 1;
    bool success = 2;
}

// Input to RequestVote
message RequestVoteArgs {
    int64 term = 1;
    string candidateID = 2;
    int64 lastLogIndex = 3;
    int64 lasLogTerm = 4;
}

// Output from RequestVote
message RequestVoteRet {
    int64 term = 1;
    bool voteGranted = 2;
}

// Raft service
service Raft {
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesRet) {}
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteRet) {}
}


////////////////////////// PBFT //////////////////////////

// Request from client
message ClientRequest {
    string operation = 1;
    int64 timestamp = 2;
	string clientID = 3;
	// int64 sequenceID = 4; // Is this set by the client or primary?
}

// Response to client
message ClientResponse {
    int64 viewId = 1;
    int64 timestamp = 2;
    string clientID = 3;
    string node = 4;
    Result nodeResult = 5;
    // int64 sequenceID = 6; // Again not in the paper. Required?
}

message PrePrepareMsg {
    int64 viewId = 1;
    int64 sequenceID = 2;
    string digest = 3;
    ClientRequest request = 4;
    string node = 5;
}

message PrepareMsg {
    int64 viewId = 1;
    int64 sequenceID = 2;
    string digest = 3;
    string node = 4;
}

message CommitMsg {
    int64 viewId = 1;
    int64 sequenceID = 2;
    string digest = 3;
    string node = 4;
}

message LogEntry {
    oneof entry {
        PrePrepareMsg preprep = 1;
        PrepareMsg prep = 2;
        CommitMsg commit = 3;
    }
}

message PbftMsgAccepted {
    int64 viewId = 1;
    int64 sequenceID = 2;
    bool success = 3;
    string typeOfAccepted = 4;
    string node = 5;
}

service Pbft {
    rpc ClientRequestPBFT(ClientRequest) returns (ClientResponse) {}
    rpc PrePreparePBFT(PrePrepareMsg) returns (PbftMsgAccepted) {}
    rpc PreparePBFT(PrepareMsg) returns (PbftMsgAccepted) {}
    rpc CommitPBFT(CommitMsg) returns (PbftMsgAccepted) {}
}